- name: Deploy Petclinic App on VM
  hosts: testvm
  become: yes
  tags: 
    - jmeter
  vars:
    jmeter_version: 5.6.2 

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Docker image
      command:
        cmd: "docker pull diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      register: docker_pull

    - name: Check if container is already running
      command:
        cmd: "docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      register: container_running
      changed_when: false
      ignore_errors: true

    - name: Stop and remove container if it's running
      shell:
        cmd: "docker rm -f $(docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }})"
      when: container_running.stdout != ""

    - name: Run Docker container
      command:
        cmd: "docker run -d -p 8080:8080 diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      when: docker_pull.changed

    # Install required packages for JMeter
    - name: Install required packages for JMeter
      ansible.builtin.package:
        name:
          - unzip
          - openjdk-8-jdk  # Adjusted the package name here
        state: present
      tags: 
        - jmeter

    # Download JMeter
    - name: Download JMeter
      get_url:
        url: "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-{{ jmeter_version }}.tgz"
        dest: "/tmp/apache-jmeter-{{ jmeter_version }}.tgz"
        mode: '0755'
      tags: 
        - jmeter
    # Extract JMeter
    - name: Extract JMeter
      unarchive:
        src: "/tmp/apache-jmeter-{{ jmeter_version }}.tgz"
        dest: /opt/
        remote_src: yes
      tags: 
        - jmeter
    # Ensure JMeter tests directory exists
    - name: Ensure JMeter tests directory exists
      ansible.builtin.file:
        path: /opt/jmeter_tests
        state: directory
        mode: '0755'
      tags: 
        - jmeter

    - name: Transfer JMeter test plan to VM
      ansible.builtin.copy:
        src: /home/diarhussein/Downloads/devoteam-traineeship-petclinic/src/test/jmeter/JMetertest.jmx
        dest: /opt/jmeter_tests/JMetertest.jmx
      tags: 
        - jmeter
    # Execute JMeter tests
    # Execute JMeter tests
    - name: Execute JMeter tests
      command:
        cmd: "/opt/apache-jmeter-{{ jmeter_version }}/bin/jmeter -n -t /opt/jmeter_tests/JMetertest.jmx -l /opt/jmeter_tests/results.jtl"
      register: jmeter_result
      tags: 
        - jmeter
    # Display JMeter test results in pipeline output
    - name: Display JMeter test results
      command: cat /opt/jmeter_tests/results.jtl
      register: jmeter_output
      when: jmeter_result is changed
      tags: 
        - jmeter
    - debug:
        var: jmeter_output.stdout_lines
      when: jmeter_result is changed
      tags: 
        - jmeter
    # Optional: Fetch JMeter test results to runner
    - name: Fetch JMeter test results to runner
      fetch:
        src: /opt/jmeter_tests/results.jtl
        dest: /home/diarhussein/Downloads/results/results.jtl
        flat: yes
      when: jmeter_result is changed
      tags: 
        - jmeter

# Selenium Tests for acceptance VM
- name: Execute Selenium tests on Acceptance VM
  hosts: acceptancevm 
  become: yes
  tags: 
    - selenium

  tasks:
    # Add Docker GPG apt Key (if not added in a previous step)
    - name: Add Docker GPG apt Key for Selenium tests
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    # Add Docker Repository (if not added in a previous step)
    - name: Add Docker Repository for Selenium tests
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
    
    # Install Docker CE
    - name: Update apt and install docker-ce for Selenium tests
      apt:
        name: docker-ce
        state: latest
        update_cache: true
    
    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
    
    # Pull Docker image for Selenium tests
    - name: Pull Docker image for Selenium tests
      command:
        cmd: "docker pull diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      register: selenium_docker_pull

    - name: Check if container is already running
      command:
        cmd: "docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      register: container_running
      changed_when: false
      ignore_errors: true

    - name: Stop and remove container if it's running
      shell:
        cmd: "docker rm -f $(docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }})"
      when: container_running.stdout != ""

    - name: Run Docker container
      command:
        cmd: "docker run -d -p 8080:8080 diarhussein/petclinic:{{ docker_tag | default('latest') }}"
      when: selenium_docker_pull.changed

    # Ensure Selenium test directory exists
    - name: Ensure Selenium tests directory exists
      ansible.builtin.file:
        path: /opt/selenium_tests
        state: directory
        mode: '0755'

    - name: Ensure Python3 is installed on the VM
      apt:
        name: python3
        state: latest
        update_cache: yes

    - name: Ensure pip3 is installed
      apt:
        name: python3-pip
        state: latest
        update_cache: yes

    - name: Install selenium Python package
      pip:
        name: selenium
        executable: pip3

    - name: Add Google Chrome's official APT key
      apt_key:
        url: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Add Google Chrome's official APT repo
      apt_repository:
        repo: deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
        state: present

    - name: Install Google Chrome
      apt:
        name: google-chrome-stable
        state: present

    - name: Download ChromeDriver
      get_url:
        url: "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip"
        dest: "/tmp/chromedrive_linux64.zip"
        mode: '0755'

    - name: Install unzip utility
      apt:
        name: unzip
        state: present

    - name: Unzip ChromeDriver
      unarchive:
        src: "/tmp/chromedriver_linux64.zip"
        dest: "/usr/bin"
        remote_src: yes

    - name: List files in /usr/bin
      command: ls /usr/bin
      register: bin_contents

    - debug:
        var: bin_contents.stdout_lines


    - name: Make ChromeDriver executable
      ansible.builtin.file:
        path: /usr/bin/chromedriver-linux64/chromedriver
        mode: '0755'

    # Transfer Selenium test script to VM
    - name: Transfer Selenium test script to VM
      ansible.builtin.copy:
        src: /home/diarhussein/Downloads/devoteam-traineeship-petclinic/test_petclinic.py
        dest: /opt/selenium_tests/test_petclinic.py

    # Execute Selenium tests using Docker
    - name: Execute Selenium test using Python3 on VM
      command:
        cmd: "python3 /opt/selenium_tests/test_petclinic.py"
      register: selenium_test_result

    # Assuming the test script outputs results to a file, you can display and fetch them similar to JMeter:
    # Display Selenium test results in pipeline output
    - name: Display Selenium test results
      command: cat /opt/selenium_tests/results.txt  # Assuming test results are written to this file
      register: selenium_output

    - debug:
        var: selenium_output.stdout_lines

    # Optional: Fetch Selenium test results to runner
    - name: Fetch Selenium test results to runner
      fetch:
        src: /opt/selenium_tests/results.txt  # Modify if your test results are stored in a different path
        dest: /home/diarhussein/Downloads/results/selenium_results.txt
        flat: yes

# Web App Deployment for production VM
# - name: Deploy Petclinic Web App on Production VM
#   hosts: productionvm 
#   become: yes
#   tags: 
#     - webappdeploy

#   tasks:
    
#     - name: Add Docker GPG apt Key
#       apt_key:
#         url: https://download.docker.com/linux/ubuntu/gpg
#         state: present

#     - name: Add Docker Repository
#       apt_repository:
#         repo: deb https://download.docker.com/linux/ubuntu focal stable
#         state: present

#     - name: Update apt and install docker-ce
#       apt:
#         name: docker-ce
#         state: latest
#         update_cache: true

#     - name: Install Docker Module for Python
#       pip:
#         name: docker

#     - name: Start and enable Docker service
#       ansible.builtin.service:
#         name: docker
#         state: started
#         enabled: yes

#     - name: Pull Docker image
#       command:
#         cmd: "docker pull diarhussein/petclinic:{{ docker_tag | default('latest') }}"
#       register: docker_pull

#     - name: Check if container is already running
#       command:
#         cmd: "docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }}"
#       register: container_running
#       changed_when: false
#       ignore_errors: true

#     - name: Stop and remove container if it's running
#       shell:
#         cmd: "docker rm -f $(docker ps -q --filter ancestor=diarhussein/petclinic:{{ docker_tag | default('latest') }})"
#       when: container_running.stdout != ""

#     - name: Run Docker container
#       command:
#         cmd: "docker run -d -p 8080:8080 diarhussein/petclinic:{{ docker_tag | default('latest') }}"
#       when: docker_pull.changed